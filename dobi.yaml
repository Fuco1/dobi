#
# dobi.yaml - resources for building, testing, and developing dobi
#

meta:
    project: dobi
    default: all

#
# Mounts
#

mount=source:
    bind: .
    path: /go/src/github.com/dnephin/dobi

mount=dist:
    bind: ./dist/bin/
    path: /go/bin/

#
# Images
#

image=builder:
    image: dobi-dev
    context: ./dockerfiles/
    dockerfile: Dockerfile.build

image=linter:
    image: dobi-linter
    dockerfile: dockerfiles/Dockerfile.lint

image=dist-img:
    image: dnephin/dobi
    tags: ["{env.DOBI_VERSION}"]
    dockerfile: dockerfiles/Dockerfile.dist

image=releaser:
    image: foo/dobi-release
    dockerfile: dockerfiles/Dockerfile.release

image=docs-img:
    image: dobi-docs-dev
    dockerfile: dockerfiles/Dockerfile.docs


#
# Run
#

run=binary:
    use: builder
    artifact: ./dist/bin/
    mounts: [source, dist]
    command: "script/build"
    env:
      - "DOBI_BUILD_OS={env.DOBI_BUILD_OS:}"

run=watch:
    use: builder
    mounts: [source]
    command: "script/watch"
    interactive: true
    depends: [mocks]

run=shell:
    use: builder
    mounts: [source, dist]
    interactive: true
    provide-docker: true
    command: bash

run=test-unit:
    use: builder
    mounts: [source]
    command: "bash -c 'go test -v $(glide novendor)'"
    depends: [mocks]

run=lint:
    use: linter
    mounts: [source]

run=release:
    use: releaser
    mounts: [dist]
    env:
     - "GITHUB_TOKEN={env.GITHUB_TOKEN}"
     - "DOBI_VERSION={env.CIRCLE_TAG}"
    depends: [binary]

run=docs-build:
    use: docs-img
    artifact: ./docs/build/html
    mounts: [source]
    command: ./docs/script/build

run=docs-shell:
    use: docs-img
    mounts: [source]
    interactive: true
    command: bash

run=docs-watch:
    use: docs-img
    mounts: [source]
    interactive: true
    command: ./docs/script/watch

run=docs:
    use: docs-img
    mounts: [source]
    interactive: true
    command: ./docs/script/serve
    depends: ['docs-build']

run=mocks:
    use: builder
    mounts: [source]
    command: "bash -c 'go generate $(glide nv)'"

run=deps:
    use: builder
    mounts: [source]
    command: "glide install"
    artifact: vendor/

#
# Aliases
#

alias=test:
    tasks: [test-unit]

alias=all:
    tasks: [lint, test, docs-build, binary]
