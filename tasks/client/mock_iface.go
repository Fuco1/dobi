// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

package client

import (
	go_dockerclient "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDockerClient is a mock of DockerClient interface
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return _m.recorder
}

// BuildImage mocks base method
func (_m *MockDockerClient) BuildImage(_param0 go_dockerclient.BuildImageOptions) error {
	ret := _m.ctrl.Call(_m, "BuildImage", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildImage indicates an expected call of BuildImage
func (_mr *MockDockerClientMockRecorder) BuildImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BuildImage", reflect.TypeOf((*MockDockerClient)(nil).BuildImage), arg0)
}

// InspectImage mocks base method
func (_m *MockDockerClient) InspectImage(_param0 string) (*go_dockerclient.Image, error) {
	ret := _m.ctrl.Call(_m, "InspectImage", _param0)
	ret0, _ := ret[0].(*go_dockerclient.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectImage indicates an expected call of InspectImage
func (_mr *MockDockerClientMockRecorder) InspectImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InspectImage", reflect.TypeOf((*MockDockerClient)(nil).InspectImage), arg0)
}

// PushImage mocks base method
func (_m *MockDockerClient) PushImage(_param0 go_dockerclient.PushImageOptions, _param1 go_dockerclient.AuthConfiguration) error {
	ret := _m.ctrl.Call(_m, "PushImage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage
func (_mr *MockDockerClientMockRecorder) PushImage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PushImage", reflect.TypeOf((*MockDockerClient)(nil).PushImage), arg0, arg1)
}

// PullImage mocks base method
func (_m *MockDockerClient) PullImage(_param0 go_dockerclient.PullImageOptions, _param1 go_dockerclient.AuthConfiguration) error {
	ret := _m.ctrl.Call(_m, "PullImage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage
func (_mr *MockDockerClientMockRecorder) PullImage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PullImage", reflect.TypeOf((*MockDockerClient)(nil).PullImage), arg0, arg1)
}

// RemoveImage mocks base method
func (_m *MockDockerClient) RemoveImage(_param0 string) error {
	ret := _m.ctrl.Call(_m, "RemoveImage", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage
func (_mr *MockDockerClientMockRecorder) RemoveImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveImage", reflect.TypeOf((*MockDockerClient)(nil).RemoveImage), arg0)
}

// TagImage mocks base method
func (_m *MockDockerClient) TagImage(_param0 string, _param1 go_dockerclient.TagImageOptions) error {
	ret := _m.ctrl.Call(_m, "TagImage", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagImage indicates an expected call of TagImage
func (_mr *MockDockerClientMockRecorder) TagImage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TagImage", reflect.TypeOf((*MockDockerClient)(nil).TagImage), arg0, arg1)
}

// AttachToContainerNonBlocking mocks base method
func (_m *MockDockerClient) AttachToContainerNonBlocking(_param0 go_dockerclient.AttachToContainerOptions) (go_dockerclient.CloseWaiter, error) {
	ret := _m.ctrl.Call(_m, "AttachToContainerNonBlocking", _param0)
	ret0, _ := ret[0].(go_dockerclient.CloseWaiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToContainerNonBlocking indicates an expected call of AttachToContainerNonBlocking
func (_mr *MockDockerClientMockRecorder) AttachToContainerNonBlocking(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AttachToContainerNonBlocking", reflect.TypeOf((*MockDockerClient)(nil).AttachToContainerNonBlocking), arg0)
}

// CreateContainer mocks base method
func (_m *MockDockerClient) CreateContainer(_param0 go_dockerclient.CreateContainerOptions) (*go_dockerclient.Container, error) {
	ret := _m.ctrl.Call(_m, "CreateContainer", _param0)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer
func (_mr *MockDockerClientMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateContainer", reflect.TypeOf((*MockDockerClient)(nil).CreateContainer), arg0)
}

// KillContainer mocks base method
func (_m *MockDockerClient) KillContainer(_param0 go_dockerclient.KillContainerOptions) error {
	ret := _m.ctrl.Call(_m, "KillContainer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillContainer indicates an expected call of KillContainer
func (_mr *MockDockerClientMockRecorder) KillContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KillContainer", reflect.TypeOf((*MockDockerClient)(nil).KillContainer), arg0)
}

// RemoveContainer mocks base method
func (_m *MockDockerClient) RemoveContainer(_param0 go_dockerclient.RemoveContainerOptions) error {
	ret := _m.ctrl.Call(_m, "RemoveContainer", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer
func (_mr *MockDockerClientMockRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveContainer", reflect.TypeOf((*MockDockerClient)(nil).RemoveContainer), arg0)
}

// StartContainer mocks base method
func (_m *MockDockerClient) StartContainer(_param0 string, _param1 *go_dockerclient.HostConfig) error {
	ret := _m.ctrl.Call(_m, "StartContainer", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer
func (_mr *MockDockerClientMockRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartContainer", reflect.TypeOf((*MockDockerClient)(nil).StartContainer), arg0, arg1)
}

// WaitContainer mocks base method
func (_m *MockDockerClient) WaitContainer(_param0 string) (int, error) {
	ret := _m.ctrl.Call(_m, "WaitContainer", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitContainer indicates an expected call of WaitContainer
func (_mr *MockDockerClientMockRecorder) WaitContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WaitContainer", reflect.TypeOf((*MockDockerClient)(nil).WaitContainer), arg0)
}

// CreateVolume mocks base method
func (_m *MockDockerClient) CreateVolume(opts go_dockerclient.CreateVolumeOptions) (*go_dockerclient.Volume, error) {
	ret := _m.ctrl.Call(_m, "CreateVolume", opts)
	ret0, _ := ret[0].(*go_dockerclient.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (_mr *MockDockerClientMockRecorder) CreateVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateVolume", reflect.TypeOf((*MockDockerClient)(nil).CreateVolume), arg0)
}

// RemoveVolume mocks base method
func (_m *MockDockerClient) RemoveVolume(name string) error {
	ret := _m.ctrl.Call(_m, "RemoveVolume", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume
func (_mr *MockDockerClientMockRecorder) RemoveVolume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveVolume", reflect.TypeOf((*MockDockerClient)(nil).RemoveVolume), arg0)
}
