
(Docker) Build Pipe(line)
=========================

A build tool for Docker applications.

Build Pipe allows you define the images, environments, and processes you use to
develop, build, test, and deploy your application. Each resource and its
dependencies are defined in a Buildpipe file. Groups of resources can be combined
to form pipelines, which can be run using ``dobi <resource>``.


Resources
---------

Image
~~~~~
An image resource builds an image from a Dockerfile, or pulls an image from a
registry.

An image is considered up-to-date if all files in the build context have a
modified time older than the created time of the current image.

If an image depends on another image resource, the dependency will be built
first (if it is not up-to-date).

If an image depends on a command, the command will be run first. The
command resource must exit before the image resource will be run.

An image resource can not depend on a volume.


Command
~~~~~~~
A command resource runs a process in a container.

Each command uses an image defined by an image resource.  By default, a command
is never considered up-to-date, it will always run.  If a container resource has
an ``artifact`` property, which is a path to a local file, the last modified
time of that file will be used. A command resource is considered up-to-date if
the modified time of the ``artifact`` is more recent then:
 * the created time of the image it uses
 * the last modified time of all files in any volumes used by the resource


The image resource used by a command resource is automatically added
as an implicit dependency of the command.

If a container depends on another container, the container will be run first.

If a uses ``volumes``, the volumes resources will be run first.

If a container uses a ``network`` resource it will be run first and the container
will join the default network for the environment.


Volume
~~~~~~
A volume resource creates a host or named volume. If the volume already exists
the resource is a no-op.

A volume can not depend on any resource.


Environment
~~~~~~~~~~~
An environment resource runs multiple containers as defined by a Compose file.

An environment may depend on images, volumes, or commands.


Commands
--------

run
~~~

Each resource can be run by using the resource name. Running a resource will
run all out-of-date dependency resources first.

.. code::

    dobi <pipeline>


rm
~~

The resource is removed.



Variables
---------

To keep pipelines from interfering with each other a unique tag is used for
every image and container. By default a random id is used, but you can also
specify a unique tag from an environment variable.

The value supports many variables:

  * ENV.USER - the $USER environment variable
  * ENV.UID - the $UID environment variable
  * ENV.<environment variable> - a value of an environment variable
  * GIT.SHA - the git sha (with -dirty if there are un-committed changes)
  * GIT.BRANCH - the git branch name
  * GIT.USERNAME - the git username from git config at user.name
  * UNIQUE_ID - a random id generated by dobi
