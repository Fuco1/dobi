
(Docker) Build Pipe(line)
=========================

A build tool for Docker applications.

Build Pipe allows you define the images, environments, and proceses you use to
develop, build, test, and deploy your application. Each resource and its
dependencies are defined in a Buildpipe file. Groups of resources can be combined
to form pipelines, which can be run using ``buildpipe <pipeline>``.


Resources
---------

Image
~~~~~
An image resource builds an image from a Dockerfile.

An image is considered up-to-date if all files in the build context have a
modified time older than the created time of the current image.

If an image depends on another image resource, the dependency will be built
first (if it is not up-to-date).

If an image depends on a container the container will be run first. The
container must exit before the image resource will be run.

An image resource can not depend on a named volume.


Container
~~~~~~~~~
A container resource runs a container.

The container may use an image created by an image resource, or an already
existing image. By default, a container is never considered up-to-date, it will
always run.  If a container resource has a ``state_file`` property, which is a
path to a local file, the last modified time of that file will be used. A
container resource is considered up-to-date if the modified time of the
``state_file`` is more recent then:
 * the created time of the image it uses
 * the last modified time of all files in any volumes used by the resource


If a container uses an image resource, it is automatically added
as an implicit dependency.

If a container depends on another container, the container will be run first.
See `Dependencies` for options to control the state of the dependency container.

If a container depends on a volume, the volume will be created (if it doesn't
already exist).


Volume
~~~~~~
A volume resource creates a host or named volume. If the volume already exists
the resource is a no-op.

A volume can not depend on anything.


Dependencies
------------

Resources dependencies are defined using the ``depends`` key in a resource
definition. The list of dependencies may be the name of other resources
(when the dependency is an image), or a resource definition (when the
dependency is a container or volume).

Container dependencies must specify the expected state of the container,
either ``running`` or ``exited`` (the default).

Volume dependencies must specify the container path used to mount the volume.


Commands
--------

Each resource can be run as a command. Running a resource will run all
out-of-date dependency resources first.

With the `--rm` flag, the resource is removed instead of run.



Variables
---------

To keep pipelines from interfering with each other a unique tag is used for
every image and container. By default a random id is used, but you can also
specify a unique tag from an environment variable.

The value supports many variables:

  * ENV.USER - the $USER environment variable
  * ENV.UID - the $UID environment variable
  * ENV.<environment variable> - a value of an environment variable
  * GIT.SHA - the git sha (with -dirty if there are un-committed changes)
  * GIT.BRANCH - the git branch name
  * GIT.USERNAME - the git username from git config at user.name
  * UNIQUE_ID - a random id generated by buildpipe
