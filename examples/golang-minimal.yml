#
# An example configuration for a golang application.
#
# This configuration handles the common tasks required for most projects:
#   * build one or more binaries
#   * run unit tests
#   * run integration tests against a service dependency
#   * run linting and style checks
#   * build a docker image for publishing the application
#

#
# An `image` resource
#
# Produces an image with a single tag
#
builder:
  image: "project-dev"
  dockerfile: Dockerfile.build

#
# A `volume` resource for the binaries
#
dist:
  path: "./dist"
  mount: "/target"

#
# A `volume` resource for the project source
#
source:
  path: "."
  mount: "/go/src/github.com/org/project"

#
# A `container` resource for building the binaries
#
build-binary-task:
  use: builder
  artifact: ./dist/binary-name
  volumes:
    - source
    - dist

#
# An `image` resource for publishing the project as a minimal docker image
#
dist-image:
  image: "project-name"
  dockerfile: Dockerfile.run
  tags:
    - latest
    - ${VERSION}
  depends: [build-binary-task]

#
# A `container` resource for running unit tests
#
test-unit:
  container: "project-test-unit"
  image: builder
  command: "go test -v -cover ./..."
  volumes: [source]


#
# A `container` resource for running end-to-end tests
#
test-acceptance:
  container: "project-test-aceptance"
  image: builder
  command: "tests/acceptance/run.sh"
  environment: "dev-env"
  volumes:
    - source
    - dist

#
# An `environment` resource for running end-to-end test
#
dev-env:
  compose_file: "docker-compose.yml"
  project_name: "test-${UNIQUE_ID}"
  depends: [dist-image]

#
# An `image` resource for running linting and style checks
#
lint-image:
  image: "project-style"
  tags: [latest]
  depends: [project-dev]

#
# A `container` resource
#
lint:
  container: "project-dev-lint"
  image: lint-image
  volumes: [source]
